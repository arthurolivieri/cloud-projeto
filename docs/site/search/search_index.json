{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto de Computa\u00e7\u00e3o em Nuvem","text":""},{"location":"#feito-por-arthur-olivieri","title":"Feito por: Arthur Olivieri","text":""},{"location":"#a-proposta-do-projeto","title":"A proposta do projeto:","text":"<p>O projeto do semestre consistiu em criar uma API RESTful para cadastrar e autenticar usu\u00e1rios e expor algum conte\u00fado externo, seja consumindo uma outra API ou fazendo um scraping de alguma p\u00e1gina web. Essa API, em conjunto com o banco de dados PostgreSQL deve ser conteinerizado.</p>"},{"location":"#o-meu-projeto","title":"O meu projeto:","text":"<p>O meu projeto cobre os requisitos da proposta, permitindo cadastrar e autenticar usu\u00e1rios e expondo piadas provenientes de uma API externa.</p>"},{"location":"#links-rapidos","title":"Links R\u00e1pidos:","text":"<ol> <li> <p>Link para o reposit\u00f3rio do projeto no github</p> </li> <li> <p>Link para o reposit\u00f3rio da imagem no dockerhub</p> </li> <li> <p>Link para o download do compose.yaml</p> </li> </ol>"},{"location":"#executando-o-conteiner","title":"Executando o cont\u00eainer:","text":"<ol> <li> <p>Tenha o docker instalado no seu computador. Esse tutorial pode te ajudar caso ainda n\u00e3o tenha baixado.</p> </li> <li> <p>Clique aqui para baixar o arquivo compose.yaml.</p> </li> <li> <p>Em um terminal, entre na pasta em que se encontra o arquivo baixado e execute o comando <code>docker compose up -d</code></p> </li> <li> <p>Se tudo ocorreu bem, voc\u00ea pode consumir a API de acordo com os endpoints abaixo no link http://localhost:8000 utilizando um m\u00e9todo de sua prefer\u00eancia. Uma sugest\u00e3o \u00e9 utilizar a pr\u00f3pria documenta\u00e7\u00e3o do FastAPI no link http://localhost:8000/docs, onde \u00e9 poss\u00edvel testar todos os endpoints.</p> </li> </ol>"},{"location":"#testando-e-utilizando-a-api","title":"Testando e utilizando a API:","text":"<p>Para utilizar a API, voc\u00ea deve se registrar como usu\u00e1rio, fazer login, guardar o token obtido no login, e rir da piada exposta utilizando o token no header da requisi\u00e7\u00e3o de acordo com os endpoints a seguir.</p>"},{"location":"#post-register","title":"POST /register","text":"<p>Payload de request - informa\u00e7\u00f5es de registro</p> <pre><code>{\n\"nome\": \"seu-nome\",\n\"email\": \"seu-email\",\n\"senha\": \"sua-senha\"\n}\n</code></pre> <p>Payload de resposta - um token de autentica\u00e7\u00e3o</p> <pre><code>{\n\"jwt\": \"iOiIxMjM0NTY...\",\n}\n</code></pre>"},{"location":"#post-login","title":"POST /login","text":"<p>Payload de request - informa\u00e7\u00f5es de login. Note que nesse momento um registro j\u00e1 deve ter sido feito, ou seja, voc\u00ea deve existir como usu\u00e1rio.</p> <pre><code>{\n\"email\": \"seu-email\",\n\"senha\": \"sua-senha\"\n}\n</code></pre> <p>Payload de resposta - um token de autentica\u00e7\u00e3o</p> <pre><code>{\n\"jwt\": \"iOiIxMjM0NTY...\",\n}\n</code></pre>"},{"location":"#get-consultar","title":"GET /consultar","text":"<p>No header, deve haver o token obtido no login no seguinte formato</p> <pre><code>Authorization: Bearer &lt;JWT&gt;\n</code></pre> <p>Payload de resposta - uma piada no seguinte formato:</p> <pre><code>{\n\"setup\": \"What's the difference between a hot potato and a flying pig?\",\n\"delivery\": \"One's a heated yam, the other's a yeeted ham.\",\n}\n</code></pre>"}]}